window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "macroecon_tools", "modulename": "macroecon_tools", "kind": "module", "doc": "<p>Initialization for the <code>macroecon-tools</code> package.</p>\n\n<h3 id=\"imports-from-submodules\">Imports from submodules:</h3>\n\n<ul>\n<li><p><strong><code>timeseries</code></strong></p>\n\n<ul>\n<li><code>Timeseries</code></li>\n<li><code>TimeseriesTable</code></li>\n</ul></li>\n<li><p><strong><code>fetch_data</code></strong></p>\n\n<ul>\n<li><code>get_fred()</code></li>\n<li><code>get_barnichon()</code></li>\n<li><code>get_ludvigson()</code></li>\n</ul></li>\n<li><p><strong><code>TimeseriesVisualizer</code></strong></p>\n\n<ul>\n<li><code>subplots()</code></li>\n<li><code>two_vars()</code></li>\n<li><code>multi_lines()</code></li>\n</ul></li>\n</ul>\n"}, {"fullname": "macroecon_tools.Timeseries", "modulename": "macroecon_tools", "qualname": "Timeseries", "kind": "class", "doc": "<p>An extension of the Series class with customization for Timeseries purposes.</p>\n", "bases": "pandas.core.series.Series"}, {"fullname": "macroecon_tools.Timeseries.__init__", "modulename": "macroecon_tools", "qualname": "Timeseries.__init__", "kind": "function", "doc": "<p>Initializes a <code>Timeseries</code> object.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>pd.Series</code> or array-like):<br />\nA single variable in a time table.</li>\n<li><strong>is_copy</strong> (<code>bool</code>, optional):<br />\nIf <code>True</code>, the data is treated as a copy and not reindexed to daily frequency. Default is <code>False</code>.</li>\n<li><strong>name</strong> (<code>str</code>, optional):<br />\nThe name of the variable. Default is <code>None</code>.</li>\n<li><strong>label</strong> (<code>str</code>, optional):<br />\nThe label of the variable used in visualizations. Default is the variable name.</li>\n<li><strong>source_freq</strong> (<code>str</code>, optional):<br />\nThe frequency of the source data (e.g., <code>'quarterly'</code>, <code>'monthly'</code>, <code>'yearly'</code>). Default is <code>\"unknown\"</code>.</li>\n<li><strong>data_source</strong> (<code>str</code>, optional):<br />\nThe source of the data. Default is <code>\"unknown\"</code>.</li>\n<li><strong>is_percent</strong> (<code>bool</code>, optional):<br />\nIndicates if the time series is a percent (used in visualizations). Default is <code>False</code>.</li>\n<li><strong>transformations</strong> (<code>list[str]</code>, optional):<br />\nA list of transformations applied to the data. Default is an empty list.</li>\n<li><strong>*args</strong>:<br />\nAdditional positional arguments passed to the <code>pd.Series</code> constructor.</li>\n<li><strong>**kwargs</strong>:<br />\nAdditional keyword arguments passed to the <code>pd.Series</code> constructor.</li>\n</ul>\n\n<h3 id=\"raises\">Raises</h3>\n\n<ul>\n<li><strong>ValueError</strong>: If the index is not a datetime index.</li>\n<li><strong>ValueError</strong>: If the variable name is not provided.</li>\n<li><strong>ValueError</strong>: If the frequency is not provided.</li>\n</ul>\n\n<h3 id=\"notes\">Notes</h3>\n\n<ul>\n<li>The data is converted to <code>float64</code> type.</li>\n<li>If <code>is_copy</code> is <code>False</code>, the data is reindexed to daily frequency.</li>\n<li>The index is converted to a datetime index and its frequency is inferred.</li>\n<li>Adding a new parameter also requires updating <code>_update()</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">is_copy</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source_freq</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">data_source</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;unknown&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">transformations</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "macroecon_tools.Timeseries.transformations", "modulename": "macroecon_tools", "qualname": "Timeseries.transformations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "macroecon_tools.Timeseries.source_freq", "modulename": "macroecon_tools", "qualname": "Timeseries.source_freq", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "macroecon_tools.Timeseries.data_source", "modulename": "macroecon_tools", "qualname": "Timeseries.data_source", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "macroecon_tools.Timeseries.label", "modulename": "macroecon_tools", "qualname": "Timeseries.label", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "macroecon_tools.Timeseries.is_percent", "modulename": "macroecon_tools", "qualname": "Timeseries.is_percent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "macroecon_tools.Timeseries.set_percent", "modulename": "macroecon_tools", "qualname": "Timeseries.set_percent", "kind": "function", "doc": "<p>Sets the <code>Timeseries</code> object as a percent (used for TimeseriesVisualizer)</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>is_percent</strong> (<code>bool</code>, optional):<br />\nIf <code>True</code>, the <code>Timeseries</code> object is marked as a percent. Default is <code>True</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.set_label", "modulename": "macroecon_tools", "qualname": "Timeseries.set_label", "kind": "function", "doc": "<p>Sets the label of the <code>Timeseries</code> object.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>label</strong> (<code>str</code>):<br />\nThe label to set for the <code>Timeseries</code> object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.get_freqstr", "modulename": "macroecon_tools", "qualname": "Timeseries.get_freqstr", "kind": "function", "doc": "<p>Returns the frequency of the <code>Timeseries</code>.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:<br />\nThe frequency of the timeseries.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.save", "modulename": "macroecon_tools", "qualname": "Timeseries.save", "kind": "function", "doc": "<p>Saves the <code>Timeseries</code> to a file.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>file_path</strong> (<code>str</code>):<br />\nThe file path to save the <code>Timeseries</code> to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.load", "modulename": "macroecon_tools", "qualname": "Timeseries.load", "kind": "function", "doc": "<p>Loads the <code>Timeseries</code> from a file.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>file_path</strong> (<code>str</code>):<br />\nThe file path to load the <code>Timeseries</code> from.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.parse_date", "modulename": "macroecon_tools", "qualname": "Timeseries.parse_date", "kind": "function", "doc": "<p>Accepts multiple string formats and returns a date string in the format 'dd-mmm-yyyy'.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>date</strong> (<code>str</code>):<br />\nThe date string to parse.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>str</strong>:<br />\nThe parsed date in the format 'dd-mmm-yyyy'.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.logdiff", "modulename": "macroecon_tools", "qualname": "Timeseries.logdiff", "kind": "function", "doc": "<p>Transforms the data using the log difference method.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>nlag</strong> (<code>int</code>):<br />\nThe lag length for the transformation.</li>\n<li><strong>freq</strong> (<code>str</code>, optional):<br />\nFrequency of the original data. By default inferred from the series.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the transformed data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nlag</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.diff", "modulename": "macroecon_tools", "qualname": "Timeseries.diff", "kind": "function", "doc": "<p>Transforms the data using the difference method.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>nlag</strong> (<code>int</code>):<br />\nThe lag length for the transformation.</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the transformed data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nlag</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.log", "modulename": "macroecon_tools", "qualname": "Timeseries.log", "kind": "function", "doc": "<p>Transforms the data using the log method.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the transformed data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.log100", "modulename": "macroecon_tools", "qualname": "Timeseries.log100", "kind": "function", "doc": "<p>Transforms the data using the 100x log method.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the transformed data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.aggregate", "modulename": "macroecon_tools", "qualname": "Timeseries.aggregate", "kind": "function", "doc": "<p>Aggregates the data using the specified method.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>timestep</strong> (<code>str</code>):<br />\nThe timestep to aggregate the data (e.g., 'quarterly', 'monthly', 'yearly').</li>\n<li><strong>method</strong> (<code>str</code>):<br />\nThe aggregation method to use (e.g., 'lastvalue', 'mean', 'sum').</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the aggregated data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.truncate", "modulename": "macroecon_tools", "qualname": "Timeseries.truncate", "kind": "function", "doc": "<p>Truncates the data between the specified dates.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>date_one</strong> (<code>str</code>, optional):<br />\nThe start date in 'dd-mmm-yyyy' format. Default is <code>\"\"</code> (start of data).</li>\n<li><strong>date_two</strong> (<code>str</code>, optional):<br />\nThe end date in 'dd-mmm-yyyy' format. Default is <code>\"\"</code> (end of data).</li>\n</ul>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the truncated data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.combine_other", "modulename": "macroecon_tools", "qualname": "Timeseries.combine_other", "kind": "function", "doc": "<p>Replaces the data of the <code>Timeseries</code> object with the provided data.</p>\n\n<h3 id=\"parameters\">Parameters</h3>\n\n<ul>\n<li><strong>data</strong> (<code>pd.Series</code>):<br />\nThe data to replace the <code>Timeseries</code> object with.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.dropna", "modulename": "macroecon_tools", "qualname": "Timeseries.dropna", "kind": "function", "doc": "<p>Drops missing values from the data.</p>\n\n<h3 id=\"returns\">Returns</h3>\n\n<ul>\n<li><strong>Timeseries</strong>:<br />\nA new <code>Timeseries</code> object with the missing values dropped.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.linear_filter", "modulename": "macroecon_tools", "qualname": "Timeseries.linear_filter", "kind": "function", "doc": "<p>Filters the data using the linear method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_one : str\n    The start date in the format 'dd-mmm-yyyy'.\ndate_two : str\n    The end date in the format 'dd-mmm-yyyy'.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Timeseries\n    A new Timeseries object with the filtered data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.hamilton_filter", "modulename": "macroecon_tools", "qualname": "Timeseries.hamilton_filter", "kind": "function", "doc": "<p>Filters the data using the Hamilton method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_one : str\n    The start date in the format 'dd-mmm-yyyy'.\ndate_two : str\n    The end date in the format 'dd-mmm-yyyy'.\nlagLength : int, optional\n    The lag length for the 'hamilton' filter. \n    Default is None (1 for yearly, 4 for quarterly, 12 for monthly).\nleadLength : int, optional\n    The lead length for the 'hamilton' filter.\n    Default is None (2 for yearly, 8 for quarterly, 24 for monthly).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Timeseries\n    A new Timeseries object with the filtered data.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the frequency is not supported for the 'hamilton' filter.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lag_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lead_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.hamilton_filter_detrend", "modulename": "macroecon_tools", "qualname": "Timeseries.hamilton_filter_detrend", "kind": "function", "doc": "<p>Filters the data using the Hamilton method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_one : str\n    The start date in the format 'dd-mmm-yyyy'.\ndate_two : str\n    The end date in the format 'dd-mmm-yyyy'.\nlag_len : int, optional\n    The lag length for the 'hamilton' filter. \n    Default is None (1 for yearly, 4 for quarterly, 12 for monthly).\nlead_len : int, optional</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">lag_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lead_len</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.hp_filter", "modulename": "macroecon_tools", "qualname": "Timeseries.hp_filter", "kind": "function", "doc": "<p>Implements the hp (Hodrick-Prescott) filter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_one : str, optional\n    The start date in the format 'dd-mmm-yyyy'. \n    Default is \"\" (start of data).\ndate_two : str, optional\n    The end date in the format 'dd-mmm-yyyy'.\n    Default is \"\" (end of data).\nlamb : int, optional\n    The smoothing parameter for the hp filter.\n    Default is None (6.25 for yearly, 1600 for quarterly, 129600  for monthly).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">lamb</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.Timeseries.hp_filter_detrend", "modulename": "macroecon_tools", "qualname": "Timeseries.hp_filter_detrend", "kind": "function", "doc": "<p>Implements the hp (Hodrick-Prescott) filter.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_one : str, optional\n    The start date in the format 'dd-mmm-yyyy'. \n    Default is \"\" (start of data).\ndate_two : str, optional\n    The end date in the format 'dd-mmm-yyyy'.\n    Default is \"\" (end of data).\nlamb : int, optional\n    The smoothing parameter for the hp filter.\n    Default is None (6.25 for yearly, 1600 for quarterly, 129600  for monthly).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">lamb</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable", "modulename": "macroecon_tools", "qualname": "TimeseriesTable", "kind": "class", "doc": "<p>A custom TimeseriesTable that maintains a pd.DataFrame and a dictionary with Timeseries objects.</p>\n", "bases": "builtins.dict"}, {"fullname": "macroecon_tools.TimeseriesTable.__init__", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.__init__", "kind": "function", "doc": "<p>Initializes the TimeseriesTable. Ensures columns are Timeseries instances.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : dict, pd.DataFrame, optional\n    A dictionary where keys are column names and values are Timeseries instances or a pd.DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "macroecon_tools.TimeseriesTable.df", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.df", "kind": "variable", "doc": "<p>Returns the TimeseriesTable as a DataFrame.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pd.DataFrame\n    A DataFrame representation of the TimeseriesTable.</p>\n"}, {"fullname": "macroecon_tools.TimeseriesTable.to_latex", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.to_latex", "kind": "function", "doc": "<p>Returns a LaTeX representation of the TimeseriesTable object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.to_markdown", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.to_markdown", "kind": "function", "doc": "<p>Returns a Markdown representation of the TimeseriesTable object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.apply", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.apply", "kind": "function", "doc": "<p>Applies a function to the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : function\n    The function to apply to the data.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pd.DataFrame\n    A DataFrame with the function applied to the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.truncate", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.truncate", "kind": "function", "doc": "<p>Truncates the data between the specified dates.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_one : str, optional\n    The start date in the format 'dd-mmm-yyyy'. Default is \"\" (start of data).\ndate_two : str, optional\n    The end date in the format 'dd-mmm-yyyy'. Default is \"\" (end of data).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TimeseriesTable\n    A new TimeseriesTable object with the truncated data.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<pre><code>- Assumes that date parsing is handled by the Timeseries.truncate method.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">date_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.dropna", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.dropna", "kind": "function", "doc": "<p>Drops missing values from the data.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TimeseriesTable\n    A new TimeseriesTable object with the missing values dropped.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.aggregate", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.aggregate", "kind": "function", "doc": "<p>Aggregates the data using the specified method.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>timestep : str\n    The timestep to aggregate the data (e.g., 'quarterly', 'monthly', 'yearly').\nmethod: str\n    The aggregation method to use (e.g., 'lastvalue', 'mean', 'sum').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timestep</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.corr", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.corr", "kind": "function", "doc": "<p>Returns the correlation matrix of the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>var_one : str, optional\n    The first variable to compute the correlation matrix. Default is \"\".\nvar_two : str, optional\n    The second variable to compute the correlation matrix. Default is \"\".</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pd.DataFrame\n    A DataFrame with the correlation matrix.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<pre><code>- If `var_one` and `var_two` are provided, the correlation between the two variables is returned.\n- If only `var_one` is provided, the correlation between `var_one` and all other variables is returned.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">var_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">var_two</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.apply_moment_func", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.apply_moment_func", "kind": "function", "doc": "<p>Computes the specified statistical moment for a given Timeseries.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : Timeseries\n    The data to compute the moment on.\nmoment : str\n    The statistical moment to compute. Options are 'mean', 'SD', 'Skew', 'Kurt', 'min', 'max'.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pd.Series\n    A new Series object with the computed moment.</p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>ValueError\n    If the specified moment is not available.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">Timeseries</span>, </span><span class=\"param\"><span class=\"n\">moment</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.data_moments", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.data_moments", "kind": "function", "doc": "<p>Computes specified statistical moments for given variables in a dataset.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>vars : list of str\n    The list of variable names for which to display the moments. Default is an empty list (all variables).\nmoments : list of str\n    The list of moments to compute. Options are 'mean', 'SD', 'Skew', 'Kurt', 'min', 'max'. Default is an empty list (all moments).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None\n    Prints the table of computed moments for the specified variables.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">vars</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>, </span><span class=\"param\"><span class=\"n\">moments</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.save", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.save", "kind": "function", "doc": "<p>Saves the TimeseriesTable to a file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>file_path : str\n    The file path to save the TimeseriesTable to.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesTable.load", "modulename": "macroecon_tools", "qualname": "TimeseriesTable.load", "kind": "function", "doc": "<p>Loads the TimeseriesTable from a file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>file_path : str\n    The file path to load the TimeseriesTable from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesVisualizer", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer", "kind": "class", "doc": "<p>A class for visualizing timeseries data using various plotting methods.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>data : TimeseriesTable\n    The timeseries data to be visualized.</p>\n"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.__init__", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.__init__", "kind": "function", "doc": "<p>Initialize the TimeseriesVisualizer with a TimeseriesTable.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data : TimeseriesTable\n    The timeseries data to be visualized.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeseriesTable</span></span>)</span>"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.data", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.subplotpad", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.subplotpad", "kind": "function", "doc": "<p>Adjust subplot positions.</p>\n\n<p>Parameters:\n    top: Top margin (default: 0.11)\n    left: Left margin (default: 0.075)\n    vspace: Vertical space between subplots (default: 0.065)\n    hspace: Horizontal space between subplots (default: 0.07)\n    right: Right margin (default: 0.02)\n    bottom: Bottom margin (default: 0.04)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">top</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">vspace</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">hspace</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">right</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">bottom</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.subplots", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.subplots", "kind": "function", "doc": "<p>Creates a plot of multiple timeseries data in separate subplots.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>save_path : str\n    The path to save the plot.\nvariables : list[str], optional\n    A list of variables to plot. If None, all variables in the data are plotted.\nstart_date : str, optional\n    The start date for the plot.\nend_date : str, optional\n    The end date for the plot.\nis_percent : bool, optional\n    Whether to format the y-axis as percentages.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>Plot titles and axis labels can be adjusted with varialbe.set_label() and variable.set_percent().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.two_vars", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.two_vars", "kind": "function", "doc": "<p>Plot two variables against each other in one graph.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>save_path : str\n    The path to save the plot.\nx_var : str\n    The variable for the x-axis.\ny_var : str\n    The variable for the y-axis.\ntitle : str, optional\n    The title of the plot.\nstart_date : str, optional\n    The start date for the plot.\nend_date : str, optional\n    The end date for the plot.\nx_is_percent : bool, optional\n    Whether to format the x-axis as percentages.\ny_is_percent : bool, optional\n    Whether to format the y-axis as percentages.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>Plot titles and axis labels can be adjusted with varialbe.set_label() and variable.set_percent().</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">x_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">y_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">x_is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">y_is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.multi_lines", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.multi_lines", "kind": "function", "doc": "<p>Plot multiple variables on one graph.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>save_path : str\n    The path to save the plot.\nvariables : list[str], optional\n    A list of variables to plot.\n    Default: [], plot all variables.\ntitle : str\n    The title of the plot.\nstart_date : str, optional\n    The start date for the plot.\nend_date : str, optional\n    The end date for the plot.\nis_percent : bool, optional\n    Whether to format the y-axis as percentages.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.TimeseriesVisualizer.plot_individual", "modulename": "macroecon_tools", "qualname": "TimeseriesVisualizer.plot_individual", "kind": "function", "doc": "<p>Generate individual figures for the variables specified in the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>save_path : str\n    The path to save the plot. Figures saved as f\"{save_path}_{variable_name}.png\".\nvariables : list[str], optional\n    A list of variables to plot. \n    Default: [] (plot all variables).\nstart_date : str, optional\n    The start date for the plot.\n    Default: \"\" (full range).\nend_date : str, optional\n    The end date for the plot.\n    Default: \"\" (full range).\nis_percent : bool, optional\n    Whether to format the y-axis as percentages.\n    Default: False (format as integers).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">variables</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">is_percent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.get_fred", "modulename": "macroecon_tools", "qualname": "get_fred", "kind": "function", "doc": "<p>Get data from FRED.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data_sources : dict[str, str] or list[str]\n    Dictionary or list of FRED series IDs and names to assign to the data. If the value is None, the series ID is used as the name.\ndate_one : str, optional\n    Start date for data. Default is \"\".\ndate_two : str, optional\n    End date for data. Default is \"\".\napi_key : str, optional\n    API key for FRED. Default is None (not needed if using cached data).\nforce_fetch : bool, optional\n    Force fetching data from FRED. Default is False.\nverbose : bool, optional\n    Print verbose output. Default is False.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mt.TimeseriesTable\n    Table of FRED data.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>Data is automatically set to year/quarter/month-end frequency and reindexed daily.</li>\n<li>Caching is used to store data for one week before fetching new data from FRED (use force_fetch=True to ignore cache).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_sources</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">end_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force_fetch</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.get_barnichon", "modulename": "macroecon_tools", "qualname": "get_barnichon", "kind": "function", "doc": "<p>Get vacancy rate data from Barnichon.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>filepath : str\n    Path to Barnichon file.\ntable : mt.TimeseriesTable\n    Table to store data.\ninput_var : str\n    Input variable to use.\noutput_name : str\n    Name to assign to the output variable.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>mt.TimeseriesTable\n    Table with vacancy rate data.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>Data is automatically set to quarterly frequency.</li>\n<li>Necessary data is automatically fetched from FRED if needed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeseriesTable</span>,</span><span class=\"param\">\t<span class=\"n\">input_var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "macroecon_tools.get_ludvigson", "modulename": "macroecon_tools", "qualname": "get_ludvigson", "kind": "function", "doc": "<p>Get macroeconomics uncertaintity data from Ludvigson.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dict\n    Dictionary of TimeseriesTables for each data source (FinancialUncertainty, MacroUncertainty, RealUncertainty).</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<ul>\n<li>Data is automatically set to monthly frequency.</li>\n<li>Caching is used to store data for one week.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();